# 王柯然 2100017727@stu.pku.edu.cn
# 将循环展开，每次处理更多的数字
# 利用上所有其他的寄存器
# 使用二分方法处理余数问题
# 考虑到rm和mr会产生加载使用冒险，而且他们不改变CC，可以将其隔开
# 这样隔开之后不会重新设置CC，从而必须从jl或者je跳过来
# 考虑到这个问题，将二分进行特殊设计
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-10,%rdx		# len - 8 < 0?
	jl Test		# if so, goto Test:

Loop:
	mrmovq (%rdi), %r8	# read val from src...
	mrmovq 8(%rdi), %r9# read val from src+1...
	mrmovq 16(%rdi), %r10
	mrmovq 24(%rdi), %r11
	mrmovq 32(%rdi), %r12
	mrmovq 40(%rdi), %r13
	mrmovq 48(%rdi), %r14
	mrmovq 56(%rdi), %rcx
	mrmovq 64(%rdi), %rbx
	mrmovq 72(%rdi), %rbp
	rmmovq %r8, (%rsi)	# ...and store it to dst
	rmmovq %r9, 8(%rsi)# ...and store it to dst+1
	rmmovq %r10, 16(%rsi)
	rmmovq %r11, 24(%rsi)
	rmmovq %r12, 32(%rsi)
	rmmovq %r13, 40(%rsi)
	rmmovq %r14, 48(%rsi)
	rmmovq %rcx, 56(%rsi)
	rmmovq %rbx, 64(%rsi)
	rmmovq %rbp, 72(%rsi)
	andq %r8, %r8		# val <= 0?
	jle Npos1		# if so, goto Npos1:
	iaddq $1, %rax		# count++
Npos1:
	andq %r9,%r9
	jle Npos2
	iaddq $1,%rax
Npos2:
	andq %r10,%r10
	jle Npos3
	iaddq $1,%rax
Npos3:
	andq %r11,%r11
	jle Npos4
	iaddq $1,%rax
Npos4:
	andq %r12,%r12
	jle Npos5
	iaddq $1,%rax
Npos5:
	andq %r13,%r13
	jle Npos6
	iaddq $1,%rax
Npos6:
	andq %r14,%r14
	jle Npos7
	iaddq $1,%rax
Npos7:
	andq %rcx,%rcx
	jle Npos8
	iaddq $1,%rax
Npos8:
	andq %rbx,%rbx
	jle Npos9
	iaddq $1,%rax
Npos9:
	andq %rbp,%rbp
	jle Nopy
	iaddq $1,%rax
Nopy:
	iaddq $80, %rdi		# src++
	iaddq $80, %rsi		# dst++
	iaddq $-10, %rdx		# len-=10 len > 0?
	jge Loop			# if so, goto Loop:
Test:
	iaddq $6,%rdx
	jge GE4
	iaddq $3,%rdx
	jg G1
	je D1
	jl Done
G1:
	iaddq $-2,%rdx
	je D3
	jl D2
GE4:
	je D4
	iaddq $-2,%rdx
	jl D5
	je D6
	iaddq $-2,%rdx
	je D8
	jl D7
D9:
	mrmovq 64(%rdi),%r10
	rmmovq %r10,64(%rsi)
	andq %r10,%r10
D8:
	mrmovq 56(%rdi),%r10
	jle E8
	iaddq $1,%rax
E8:
	rmmovq %r10,56(%rsi)
	andq %r10,%r10
D7:
	mrmovq 48(%rdi),%r10
	jle E7
	iaddq $1,%rax
E7:
	rmmovq %r10,48(%rsi)
	andq %r10,%r10
D6:
	mrmovq 40(%rdi),%r10
	jle E6
	iaddq $1,%rax
E6:
	rmmovq %r10,40(%rsi)
	andq %r10,%r10
D5:
	mrmovq 32(%rdi),%r10
	jle E5
	iaddq $1,%rax
E5:
	rmmovq %r10,32(%rsi)
	andq %r10,%r10
D4:
	mrmovq 24(%rdi),%r10
	jle E4
	iaddq $1,%rax
E4:
	rmmovq %r10,24(%rsi)
	andq %r10,%r10
D3:
	mrmovq 16(%rdi),%r10
	jle E3
	iaddq $1,%rax
E3:
	rmmovq %r10,16(%rsi)
	andq %r10,%r10
D2:
	mrmovq 8(%rdi),%r10
	jle E2
	iaddq $1,%rax
E2:
	rmmovq %r10,8(%rsi)
	andq %r10,%r10
D1:
	mrmovq (%rdi),%r10
	jle E1
	iaddq $1,%rax
E1:
	rmmovq %r10,(%rsi)
	andq %r10,%r10
	jle Done
	iaddq $1,%rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
